; Amstrad NC200 cpmish BIOS Â© 2019 David Given
; This file is distributable under the terms of the 2-clause BSD license.
; See COPYING.cpmish in the distribution root directory for more information.

    maclib cpm
    maclib supervisor
    maclib nc200

    extern CBASE
    extern SCONIN
    extern SCONOUT
    extern SCONST
    extern SIRQ
    extern SLIST
    extern SLISTST
    extern SPUNCH
    extern SREAD
    extern SREADER
    extern SWBOOT
    extern SWRITE
    extern SYSIN
    extern SYSSTK

    cseg
label BBASE

; BIOS jump table.

label BOOT
    jp BOOTE
label WBOOT
    jp WBOOTE
label CONST
    jp CONSTE
label CONIN
    jp CONINE
label CONOUT
    jp CONOUTE
label LIST
    jp LISTE
label PUNCH
    jp PUNCHE
label READER
    jp READERE
label HOME
    jp HOMEE
label SELDSK
    jp SELDSKE
label SETTRK
    jp SETTRKE
label SETSEC
    jp SETSECE
label SETDMA
    jp SETDMAE
label READ
    jp READE
label WRITE
    jp WRITEE
label LISTST
    jp LISTSTE
label SECTRAN
    jp SECTRANE

; BIOS interrupt handler. This is only invoked when the USER0 bank is mapped,
; and we can assume the stack is valid (because interrupts won't work
; otherwise).

label BIRQ
    di
    push af
    ld (saved_stack), sp
    ld sp, SYSSTK
    
    ld a, SUPERVISOR_BANK
    out (PORT_BANK0), a
    call SIRQ
    ld a, USER0_BANK
    out (PORT_BANK0), a
    
    ld sp, (saved_stack)
    pop af
    ei
    reti

; Actual BIOS entrypoints.
;
; The BIOS calls typically use a simple calling convention where the parameter
; is in BC and the result is returned in A and HL. The docs don't mention
; anything about other registers so we'll assume they can be corrupted. In
; addition, our syscall stuff assumes that on return A = L, just like in the
; BDOS, so we have a single parameter and a single response --- all very simple.

BOOTE:
    ; Map userspace.
    di                      ; can't change mapping as our stack may be invalidated
    ld a, USER0_BANK
    out (PORT_BANK0), a
    inc a
    out (PORT_BANK1), a
    inc a
    out (PORT_BANK2), a
    ld sp, 0x100            ; ephemeral startup stack
    ei

    ld a, (CDISK)
    ld c, a
    jp CBASE                ; enter the CCP
    
WBOOTE:
    ld hl, SWBOOT
    jr syscall

CONSTE:
    ld hl, SCONST
    jr syscall

CONINE:
    ld hl, SCONIN
    jr syscall

CONOUTE:
    ld hl, SCONOUT
    jr syscall

LISTE:
    ld hl, SLIST
    jr syscall

PUNCHE:
    ld hl, SPUNCH
    jr syscall
    
READERE:
    ld hl, SREADER
    jr syscall

; Selects a drive, returning the address of the DPH in HL (or 0x0000 on
; error).
SELDSKE:
    ld a, c
    ld (BDISK), a
    or a
    jr z, select_drive_a
    ld hl, 0
    ret
select_drive_a:
    ld hl, drive_a_dph
    ret

HOMEE:
    ld c, 0
    ; fall through
SETTRKE:
    ld a, c
    ld (BTRACK), a
    ret

SETSECE:
    ld a, c
    ld (BSECTOR), a
    ret

SETDMAE:
    ld hl, BDMA
    ld (hl), c
    inc hl
    ld (hl), b
    ret

READE:
    ld hl, SREAD
    jr syscall

WRITEE:
    ld hl, SWRITE
    jr syscall

LISTSTE:
    ld hl, SLISTST
    jr syscall

SECTRANE:
    ld h, b
    ld l, c
    ret

; On entry, HL contains the system call handler address and BC the argument.
syscall:
    di
    ld (saved_stack), sp
    
    ; Map the supervisor in. At this point, our stack becomes inaccessible
    ; (because it might not be mapped).

    ld a, SUPERVISOR_BANK
    out (PORT_BANK0), a
    jp SYSIN

; On entry, HL contains the result.
label SYSOUT
    ; Map user space back in.

    ld a, USER0_BANK
    out (PORT_BANK0), a
    inc a
    out (PORT_BANK1), a
    inc a
    out (PORT_BANK2), a

    ; The stack is now accessible. Load the result and return.

    ld sp, (saved_stack)
    ld a, l
    ei
    ret

saved_stack:
    dw 0

drive_a_dph:
    dw 0            ; Sector translation vector
    dw 0, 0, 0      ; BDOS scratchpad
    dw dirbuf       ; Directory scratchpad
    dw drive_a_dpb  ; Drive parameter block
    dw drive_a_check_vector ; Disk change check vector
    dw drive_a_bitmap ; Allocation bitmap

DRIVE_A_SIZE = 720
DRIVE_A_BLOCKS = (DRIVE_A_SIZE - (2*9)) / 2

drive_a_dpb:
    dw 18*4         ; Number of CP/M sectors per track
    db 4, 15        ; BSH/BLM for 2048-byte blocks
    db 0            ; EXM for 2048-byte allocation units and >255 blocks
    dw DRIVE_A_BLOCKS-1 ; DSM
    dw 127          ; DRM, one less than the number of directory entries
    db 0xc0, 0x00   ; Initial allocation vector for two directory blocks
    dw 32           ; Size of disk change check vector: (DRM+1)/4
    dw 2            ; Number of reserved tracks

drive_a_bitmap:
    ds (DRIVE_A_BLOCKS+7) / 8
drive_a_check_vector:
    ds 32
dirbuf:
    ds 128

label BDISK
    db 0
label BTRACK
    db 0
label BSECTOR
    db 0
label BDMA
    dw 0
    
