; Brother WP2450DS cpmish BIOS Â© 2020 David Given
; This file is distributable under the terms of the 2-clause BSD license.
; See COPYING.cpmish in the distribution root directory for more information.

    maclib cpm
    maclib cpmish
    maclib wp2450ds

    extrn SYSIN
    extrn SYSOUT
    extrn ADDAHL

    public TTYINIT
    public TTYPUTC
    public TTYPUT8
    public TTYPUT16
    public TTYPUTSI
    public TTYNL
    public TTYHOME
    public SETCURS

    cseg

EMULATE_CLEAR_TO_EOL = 1
EMULATE_CLEAR_TO_EOS = 0
    maclib tty

TTYINIT equ tty_init
TTYPUTC equ tty_putc
TTYPUT8 equ tty_puthex8
TTYPUT16 equ tty_puthex16
TTYPUTSI equ tty_putsi
TTYNL equ tty_newline
TTYHOME equ tty_home_cursor

tty_rawwrite:
    and 0x7f
    sub 0x20
    push af
    ld de, (tty_cursorx)
    call calc_address
    ex de, hl                ; destination address in de

    pop af

    ld h, 0
    ld l, a
    ld b, h
    ld c, l

    ; Multiply by 7:
                             ; 1
    add hl, hl
    add hl, bc               ; 1
    add hl, hl
    add hl, bc               ; 1

    ld bc, font_table
    add hl, bc               ; hl = font addr

    ex de, hl                ; hl = video addr, de = font addr
    ld b, 7
.2
    out0l PORT_VIDEO_ADDR_LO
    out0h PORT_VIDEO_ADDR_HI
    nop
    ld a, (de)
    inc de
    out (PORT_VIDEO_DATA_W), a

    ld a, 91
    add l
    ld l, a
    jnc .3
    inc h
.3
    djnz .2

    out0l PORT_VIDEO_ADDR_LO
    out0h PORT_VIDEO_ADDR_HI
    nop
    xor a
    out (PORT_VIDEO_DATA_W), a

    ret

; On entry, D=y, E=x
calc_address:
    ld h, 0
    ld l, d
    ld b, h
    ld c, d

    ; Multiply by 728 (8 x 91):
                            ; 1
    add hl, hl              ; 0
    add hl, hl
    add hl, bc              ; 1
    add hl, hl
    add hl, bc              ; 1
    add hl, hl              ; 0
    add hl, hl
    add hl, bc              ; 1
    add hl, hl
    add hl, bc              ; 1
    add hl, hl              ; 0
    add hl, hl              ; 0
    add hl, hl              ; 0

    ld a, l
    add e
    ld l, a
    rnc
    inc h
    ret

SETCURS:
    ld hl, (tty_cursorx)
    out0l PORT_VIDEO_CURSOR_LO
    out0h PORT_VIDEO_CURSOR_HI
    ret
    
tty_clear_to_eos:
    call tty_clear_to_eol
    ld a, (tty_cursory)
    inc a
    cp SCREEN_HEIGHT
    ret z                   ; return if we're on the last line of the screen
    ld d, a
    ld e, 0
    call calc_address       ; hl is the address of the beginning of the next line

    ld de, SCREEN_WIDTH * SCREEN_HEIGHT * 8
    ex de, hl               ; DE = video memory address, HL = size of video memory
    or a                    ; clear C
    sbc hl, de              ; calculate amount of video memory to clear
    ; fall through
; Clear HL bytes from video memory address DE
clear_bytes:
    out0e PORT_VIDEO_ADDR_LO
    out0d PORT_VIDEO_ADDR_HI
    
    ld b, 0
.1
    out0b PORT_VIDEO_DATA_W
    dec hl
    ld a, h
    or l
    jr nz, .1
    ret

tty_delete_line:
    ld a, (tty_cursory)
    cp SCREEN_HEIGHT - 1
    jr z, on_last_line      ; skip scroll if there's nothing to do

    push af
    ld d, a
    ld e, 0
    call calc_address       ; hl = dest address
    pop af

    ld b, a
    ld a, SCREEN_HEIGHT - 1
    sub b                   ; calculate number of text lines to move
    add a
    add a
    add a
    ld d, a                 ; b = number of scanlines to move

    ld bc, -SCREEN_WIDTH
    add hl, bc              ; compensate for preincrement in loop
.1
    ld bc, SCREEN_WIDTH * 9
    add hl, bc
    call read_scanline

    ld bc, -(SCREEN_WIDTH * 8)
    add hl, bc
    call write_scanline

    dec d
    jr nz, .1

    ; Delete the last line of the screen.

on_last_line:
    ld de, SCREEN_WIDTH * (SCREEN_HEIGHT - 1) * 8
    ld hl, SCREEN_WIDTH * 1 * 8
    jr clear_bytes

tty_insert_line:
    ld a, (tty_cursory)
    cp SCREEN_HEIGHT - 1
    jr z, on_last_line      ; skip scroll if there's nothing to do

    ld hl, SCREEN_WIDTH * SCREEN_HEIGHT * 8 - SCREEN_WIDTH

    ld b, a
    ld a, SCREEN_HEIGHT -1
    sub b                   ; calculate number of text lines to move
    add a
    add a
    add a
    ld d, a                 ; b = number of scanlines to move

.1
    call read_scanline

    ld bc, -(SCREEN_WIDTH * 8)
    add hl, bc
    call write_scanline

    ld bc, SCREEN_WIDTH * 7
    add hl, bc

    dec d
    jr nz, .1

    ; Finished; clear the current line.

    ld a, (tty_cursory)
    ld d, a
    ld e, 0
    call calc_address
    ld hl, SCREEN_WIDTH * 1 * 8
    jp clear_bytes

; Loads the scanline at video memory address HL into the buffer.
read_scanline:
    push hl
    out0l PORT_VIDEO_ADDR_LO
    out0h PORT_VIDEO_ADDR_HI
    ld b, SCREEN_WIDTH
    ld hl, video_buffer
.1
    in0a PORT_VIDEO_DATA_R
    ld (hl), a
    inc hl
    djnz .1
    pop hl
    ret

; Writes the scanline at video memory address HL from the buffer.
write_scanline:
    push hl
    out0l PORT_VIDEO_ADDR_LO
    out0h PORT_VIDEO_ADDR_HI
    ld b, SCREEN_WIDTH
    ld hl, video_buffer
.1
    ld a, (hl)
    out0a PORT_VIDEO_DATA_W
    inc hl
    djnz .1
    pop hl
    ret

video_buffer:
    ds 91

font_table:
    include "font.inc"
font_table_end:

; vim: ts=4 sw=4 et ft=asm

